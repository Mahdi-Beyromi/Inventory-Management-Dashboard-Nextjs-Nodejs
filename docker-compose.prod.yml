version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres_prod
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-inventory_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - inventory_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: inventory_server_prod
    environment:
      DATABASE_URL: postgresql://inventory_user:${POSTGRES_PASSWORD:-inventory_password}@postgres:5432/inventory_db
      PORT: 3001
      NODE_ENV: production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - inventory_network_prod
    restart: unless-stopped

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: inventory_client_prod
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - inventory_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:

networks:
  inventory_network_prod:
    driver: bridge
